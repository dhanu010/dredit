/* Added by Juan Garcia, used AboutServlet.java as template on code*/
package edu.csus.dredit;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.api.client.http.ByteArrayContent;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.model.File;  //added for File manipulation
import com.google.gdata.client.spreadsheet.SpreadsheetService;
import com.google.gdata.data.spreadsheet.ListEntry;
import com.google.gdata.data.spreadsheet.ListFeed;
import com.google.gdata.data.spreadsheet.SpreadsheetEntry;
import com.google.gdata.data.spreadsheet.SpreadsheetFeed;
import com.google.gdata.data.spreadsheet.WorksheetEntry;
import com.google.gdata.util.ServiceException;
//import com.google.api.client.googleapis.json.GoogleJsonResponseException;
//import com.google.api.services.oauth2.Oauth2;
//import com.google.api.services.oauth2.model.Userinfoplus;
import com.google.gson.JsonObject;  //added by Juan to manipulate JSON data



/**
 * Servlet that will handle the credit card report generation of a currently logged-in user.
 *
 * @author Juan Garcia
 */
@SuppressWarnings("serial")
public class CCReportServlet extends DrEditServlet 
{
	private static String JSON_REPORT_TYPE_LABEL = "reportType";
	private static String JSON_SELECT_VALUE_LABEL = "selectValue";
	private static String JSON_FILE_NAME_LABEL = "fileName";
	private static String JSON_REPORT_SUMMARY = "summary";
	private static String JSON_REPORT_BY_CREDIT_CARD = "byCreditCard";
	private static String JSON_REPORT_BY_MONTH = "byMonth";
	
	private static String FILE_DESCRIPTION = "Report generated by credit card debt viewer";
	private static String FILE_MIME_TYPE = "text/plain";
	private static String FILE_CCREPORT = "ccReport.txt";
  /**
   * Generates a report.  There are 3 possible report types: summary report, by month, or by credit card.
   * Information will be passed down, and the "reportType" will hold one of 3 values: {"summary","byMonth","byCreditCard"}
   * If the "reportType" is different, no report will be generated and an error will be returned.
   * The attribute "fileName" will contain the name of the file to be created
   */
  @Override
  public void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws IOException 
  {
	   String reportType = req.getParameter(JSON_REPORT_TYPE_LABEL);
	   String fileName = req.getParameter(JSON_FILE_NAME_LABEL);
	   String creditCardName = req.getParameter("creditCardName");
	    
	    if(reportType.equals(JSON_REPORT_SUMMARY))
	    {
	    	//TODO: add the code here that will generate the report, and pass in the data
	    	//into the createReportFile function (for now, it is passed in as a string)

	    	SpreadsheetService service = new SpreadsheetService("CCDebtViewerService");
	    	service.setOAuth2Credentials(getCredential(req, resp));
	    	
	    	try {
	    		JsonObject returnObject = createReportFile(req,resp,fileName, JSON_REPORT_SUMMARY, getSummaryReportData(service));
	    		sendJson(resp, returnObject);
		    	//generate report by summary
	    	
	    	} catch(ServiceException e)
	    	{
	    		System.out.println("Error: " + e);
	    	}
	    	
	    } 
	    
	    else if(reportType.equals(JSON_REPORT_BY_CREDIT_CARD))
	    {
	    	
	    	//generate report by credit card
	    	System.out.println("inside of credit card report functionality");
	    	
	    	SpreadsheetService service = new SpreadsheetService("CCDebtViewerService");
	    	service.setOAuth2Credentials(getCredential(req, resp));
	    	
	    	try {
	    			JsonObject returnObject = createReportFile(req,resp,fileName, JSON_REPORT_BY_CREDIT_CARD, getReportByCCData(service, creditCardName));
	    			sendJson(resp, returnObject);
		    	//generate report by cc
	    	
	    		} catch(ServiceException e){
	    			System.out.println("Error: " + e);
	    		}
	    }
	    
	    else if(reportType.equals(JSON_REPORT_BY_MONTH))
	    {
	    	//generate report by month
	    }
	    
	    else //error - the report requested is not one of the available
	    {
	    	//generate error code
	    }    
  }
  
  private String getReportByCCData(SpreadsheetService service, String creditCardName) throws MalformedURLException, IOException, ServiceException
  {
	  String reportInfoCC = "Report By Credit Card\n";
	  String nameOfEnteredCard = "";
	  double outstandingDebt = 0;
	  int numberOfCards = 0;
	  WorksheetEntry paymentHistory;
	  SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
	  
	  
	  URL SPREADSHEET_FEED_URL = new URL(
			  "https://spreadsheets.google.com/feeds/spreadsheets/private/full");
	  
	  // Make a request to the API and get all spreadsheets.
	  SpreadsheetFeed feed = service.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);
	  List<SpreadsheetEntry> spreadsheets = feed.getEntries();
	  
	  // Iterate through all of the spreadsheets returned
	  for (SpreadsheetEntry spreadsheet : spreadsheets) 
	  {
		  if ( spreadsheet.getTitle().getPlainText().equals("CreditCard_" + creditCardName) )  
		  {
			  for (WorksheetEntry worksheet : spreadsheet.getWorksheets() )
			  {
				  if (worksheet.getTitle().getPlainText().equals("Sheet1") )
				  {
					  numberOfCards +=1;
					  nameOfEnteredCard += spreadsheet.getTitle().getPlainText().replace("CreditCard_"," ") ;
					  outstandingDebt = getLatestColumn(worksheet,service,"Balance");
					  System.out.println("Outstanding Debt is *" + spreadsheet.getTitle().getPlainText() + "*: " + outstandingDebt);
					  String spreadsheetTitle = spreadsheet.getTitle().getPlainText();
					  System.out.println("spreadsheetTitle is *** " + spreadsheetTitle);
					  System.out.println("Number of rows = " + worksheet.getRowCount());
					  
					  reportInfoCC += "\tReport of " +"*"+nameOfEnteredCard+" *"+ " credit card\n";
					  reportInfoCC += "\tOutstanding Debt Amount: " + outstandingDebt + "\n\n\n";
					  
					  URL listFeedUrl = worksheet.getListFeedUrl();
					  ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);
					  
					  reportInfoCC += "Payment history of "+"*"+nameOfEnteredCard+" *"+" credit card is as below:" + "\n";
					  reportInfoCC += "Date" + "\t\t";
		    		  reportInfoCC += "Payment" + "\t";
		    		  reportInfoCC += "Balance" + "\t";
		    		  reportInfoCC += "APR" + "\t";
		    		  
					  
		    		  // Iterate through each row
					  for (ListEntry row : listFeed.getEntries()) 
					  {
						  reportInfoCC += "\n";
						  String currentDateValue = row.getCustomElements().getValue("Date");
					      String currentPaymentValue = row.getCustomElements().getValue("Payment");
					      String currentBalanceValue = row.getCustomElements().getValue("Balance");
					      String currentAPRValue = row.getCustomElements().getValue("APR");
					      try
					      {	  
					    	  if(currentDateValue != null && currentPaymentValue != null && currentBalanceValue!= null && currentAPRValue!= null)  
					    	  {
					    		  	double currentPaymentDoubleValue = Double.parseDouble(currentPaymentValue);
					    		  	double currentBalanceDoubleValue = Double.parseDouble(currentBalanceValue);
					    		  	double currentAPRDoubleValue = Double.parseDouble(currentAPRValue);
					    		  	reportInfoCC += currentDateValue + "\t";
					    		  	reportInfoCC += currentPaymentDoubleValue + "\t";
					    		  	reportInfoCC += currentBalanceDoubleValue + "\t";
					    		  	reportInfoCC += currentAPRDoubleValue + "\t";
					    		  	
					    	  }
					      } catch(NumberFormatException e)
					      {
					    	  //if the value is not an integer, ignore that value and log
					    	  System.out.println("getAverageColumn, will ignore:  because it is not a number\n");
					      }
					   }
					  
					  
				  }
					  
			  }
		  }
		
	   }
	  
	  if(numberOfCards == 0)
	  {
		  reportInfoCC = "";
		  reportInfoCC += "No payment information was found.  Please add a credit card, and payment information in order to \n";
		  reportInfoCC +="be able to generate reports\n";
	  }
	  /*else
	  {
		  //reportInfoCC += "\tTotal number of credit cards: " + numberOfCards + "\n";
		
		  //reportInfoCC += "\tPayment History for this card is as below: " + paymentHistory + "\n";
	  }*/
	  
	  return reportInfoCC;
  }
  
  
  /*helper function that will gather the data for the report*/
  private String getSummaryReportData(SpreadsheetService service) throws MalformedURLException, IOException, ServiceException
  {
	  String reportInfo = "Report By Summary\n";
	  int numberOfCards = 0;
	  String nameOfCards = "";
	  double averagePaymentSum = 0;
	  double aprSum = 0;
	  double balanceSum = 0;
	  
	  URL SPREADSHEET_FEED_URL = new URL(
			  "https://spreadsheets.google.com/feeds/spreadsheets/private/full");
	  
	  // Make a request to the API and get all spreadsheets.
	  SpreadsheetFeed feed = service.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);
	  List<SpreadsheetEntry> spreadsheets = feed.getEntries();
	  
	  // Iterate through all of the spreadsheets returned
	  for (SpreadsheetEntry spreadsheet : spreadsheets) 
	  {
		  if ( spreadsheet.getTitle().getPlainText().startsWith("CreditCard_") )  
		  {
			  for (WorksheetEntry worksheet : spreadsheet.getWorksheets() )
			  {
				  if (worksheet.getTitle().getPlainText().equals("Sheet1") )
				  {
					  numberOfCards +=1;
					  nameOfCards += spreadsheet.getTitle().getPlainText().replace("CreditCard_","") + ", ";
					  averagePaymentSum += getAverageColumn(worksheet,service,"Payment");
					  System.out.println("Average sum after *" + spreadsheet.getTitle().getPlainText() + "*: " + averagePaymentSum);
					  aprSum += getLatestColumn(worksheet,service, "APR");
					  balanceSum += getLatestColumn(worksheet,service,"Balance");
				  }
					  
			  }
		  }
		
	   }
	  
	  if(numberOfCards == 0)
	  {
		  reportInfo += "No payment information was found.  Please add a credit card, and payment information in order to \n";
		  reportInfo +="be able to generate reports\n";
	  }
	  else
	  {
		  reportInfo += "\tTotal number of credit cards: \t" + numberOfCards + "\n";
		  reportInfo += "\tName of credit cards: \t" + nameOfCards + "\n\n\n";
		  reportInfo += "\tLatest Oustanding Balance: " + balanceSum + "\n";
		  reportInfo += "\tOverall Average Payment Amount: " + averagePaymentSum/numberOfCards + "\n";
		  reportInfo += "\tLatest Average APR: " + aprSum/numberOfCards + "\n";

	  }
	  
	  return reportInfo;
  }
  
  /*helper function.  Takes in a worksheet, service, and column name as parameters and goes through the 
   * reading the numerical values of this column and returns the average.  
   * NOTE: Any Non-numerical entries will be ignored in the average
   */
  private double getAverageColumn(WorksheetEntry worksheet,SpreadsheetService service,String columnName) 
  throws IOException, ServiceException
  {
	  int numberOfValues = 0;
	  double valueSum = 0;
	  
	  URL listFeedUrl = worksheet.getListFeedUrl();
	  ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);

	  // Iterate through each row
	  for (ListEntry row : listFeed.getEntries()) 
	  {
	      String currentStringValue = row.getCustomElements().getValue(columnName);
	      try
	      {	  
	    	  if(currentStringValue != null)  
	    	  {
	    		  	double currentDoubleValue = Double.parseDouble(currentStringValue);
	    	  		numberOfValues++;
	    	  		valueSum += currentDoubleValue;
	    	  }
	      } catch(NumberFormatException e)
	      {
	    	  //if the value is not an integer, ignore that value and log
	    	  System.out.println("getAverageColumn, will ignore: " + currentStringValue + " because it is not a number\n");
	      }
	   }

	  if(numberOfValues == 0)
		  return 0; //no 
	  else
		  return valueSum/numberOfValues;
	
  }

  /*helper function.  Takes in a worksheet, service, and column name as parameters and goes through the 
   * reading the numerical values of this column and returns the latest value (according to the date).  
   * NOTE: Any Non-numerical entries will be ignored in the average, and any entries with no date will 
   * also be ignored
   */
  private double getLatestColumn(WorksheetEntry worksheet,SpreadsheetService service,String columnName) 
  throws IOException, ServiceException
  {
	  SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
	  double latestValue = 0;
	  Date latestDate = new Date(); 
	  latestDate.setTime(0);  //set time to January 1, 1970
	  
	  URL listFeedUrl = worksheet.getListFeedUrl();
	  ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);

	  // Iterate through each row
	  for (ListEntry row : listFeed.getEntries()) 
	  {
	      String currentStringValue = row.getCustomElements().getValue(columnName);
	      String dateStringValue = row.getCustomElements().getValue("Date");	      
	      try
	      {	  
	    	  if(currentStringValue != null && dateStringValue != null)  
	    	  {
	    		  Date newDate = formatter.parse(dateStringValue);

	    		  if( newDate.after(latestDate) )
	    		  {
	    			  	double currentDoubleValue = Double.parseDouble(currentStringValue);
	    	  			latestDate = newDate;
	    	  			latestValue = currentDoubleValue;
	    		  }
	    	  }
	      } 
	      catch(NumberFormatException e)
	      {
	    	  //if the value is not a number, ignore that value and log
	    	  System.out.println("getLatestColumn, will ignore: " + currentStringValue + " because it is not a number\n");
	      }
	      catch(ParseException e)
	      {
	    	  //date was not in the expected format, ignore it
	    	  System.out.println("getLatestColumn, will ignore " + currentStringValue + " because the date was not as expected\n");
	      }
	   }

	 return latestValue;
  }

  
  
  /*helper function that will create the summary report
   * TODO: find a better way to store the content, instead of in a BIG-O string (once the file becomes long)
   * */
  private JsonObject createReportFile(HttpServletRequest req, HttpServletResponse resp, 
		  String fileName, String reportType, String content)
  {
	  	JsonObject returnObject = new JsonObject();
  		//next two properties are added for debugging purposes
  		returnObject.addProperty("ReportTypeIsNow", reportType);
	    returnObject.addProperty("fileNameThatWasPassedDownWas", fileName);

	    //TODO: move creation of file to the class that handles credit card tasks
	    //CODE TO CREATE A NEW FILE, FOR NOW, DOESN'T HAVE MUCH
	    Drive service = getDriveService(getCredential(req, resp));
	    // File's metadata.
	    File body = new File();
	    body.setTitle(fileName);
	    body.setDescription(FILE_DESCRIPTION);
	    body.setMimeType(FILE_MIME_TYPE);

	    try {
	    	service.files().insert(body, 
	    			ByteArrayContent.fromString(FILE_MIME_TYPE, content)).execute();
	    	returnObject.addProperty("Otherstatus", "good");
	    } catch (IOException e) {
	    	returnObject.addProperty("Otherstatus","BAD:" + e);
	    }
	  return returnObject;
  }
}
